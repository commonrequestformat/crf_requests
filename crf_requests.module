<?php
/**
 * @file
 * Code for the CRF Requests feature.
 */

include_once 'crf_requests.features.inc';


/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function crf_requests_form_node_form_alter(&$form, &$form_state, $form_id) {
  $node = $form['#node'];
  if (workbench_moderation_node_type_moderated($node->type)) {
  
    // Move publishing options up on node edit forms.
    $form['options']['#weight'] = -100;

    if (!isset($node->nid)) {
      $form['actions']['submit']['#prefix'] = '<div>' . t('Make sure you selected the "Current: Draft" moderation state in the "Publishing options" section above.') . '</div>';
    }
    else {
      $content_type = node_type_load($node->type);
      $form['actions']['submit']['#prefix'] = '<div>' . t('Select the "Submit to OCHA" moderation state in the "Publishing options" section above to submit this @content_type to OCHA.', array('@content_type' => $content_type->name)) . '</div>';
    }
  }
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function crf_requests_form_crf_request_node_form_alter(&$form, &$form_state, $form_id) {
  $node = $form['#node'];
  if (!isset($node->nid)) {  
    $form['actions']['submit']['#value'] = t('Create & Send Info Request');
  
    // Help link
    $help_link = theme('advanced_help_topic', array(
      'module' => 'crf_requests',
      'topic' => 'request-email',
    ));
    $form['field_append_to_alert_email']['#prefix'] = $help_link . '&nbsp;' . t('Show me an Information Request email example');
  }
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function crf_requests_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  switch($form['#id']) {
    case 'views-exposed-form-requests-page':
      $form['name_field_value'] = crf_requests_convert_form_textfield('taxonomy_term', 'disaster_types');
      $form['field_reporting_type_target_id'] = crf_requests_convert_form_textfield('taxonomy_term', 'reporting_types');      
      break;
    case 'views-exposed-form-request-content-cluster-request-content':
      $form['nid'] = crf_requests_convert_form_textfield('node', 'crf_request');
      break;
  }
}


/**
 * Implements hook_node_presave().
 */
function crf_requests_node_presave($node) {
  if ($node->type == 'crf_request' && $node->is_new) {
    if (isset($node->field_crf_req_contact['und'])) {
      $cluster_contacts = crf_requests_get_cluster_contacts();    
      foreach ($cluster_contacts as $cluster_contact) {
        foreach ($node->field_crf_req_contact['und'] as $request_contact) {
          $ocha_focal_point = user_load($request_contact['target_id']);
          $params = array(
            'node' => $node,
            'cluster_contact' => $cluster_contact,
            'ocha_focal_point' => $ocha_focal_point,
          );
          drupal_mail('crf_requests', 'new_request_alert', $cluster_contact->field_contact_email['und'][0]['email'], $node->language, $params, $ocha_focal_point->mail);
        }
      }
    }
  }
}


/**
 * Implements hook_mail().
 */
function crf_requests_mail($key, &$message, $params) {
  if ($key == 'new_request_alert') {
    $node = $params['node'];
    $cluster_contact = $params['cluster_contact'];
    $ocha_focal_point = $params['ocha_focal_point'];
    
    $content_types = array();
    $content_type_names = node_type_get_names();    
    foreach ($node->field_crf_req_contents['und'] as $content_type) {
      $content_types[] = $content_type_names[$content_type['value']];
    }
    
    $append_to_email = !empty($node->field_append_to_alert_email['und']) ? $node->field_append_to_alert_email['und'][0]['value'] : '';

    $body = '<p>Dear ' . $cluster_contact->field_contact_first_name['und'][0]['value'] . ' ' . $cluster_contact->field_contact_lastname['und'][0]['value'] . ',</p>';
    $body .= '<p>OCHA (' . $ocha_focal_point->field_first_name['und'][0]['value'] . ' ' . $ocha_focal_point->field_last_name['und'][0]['value'] . ') is requesting that you provide specific information as outlined below in the Information Request ' . $node->title . '.</p>';
    $body .= '<p>' . theme('item_list', array('items' => $content_types)) . '</p>';
    $body .= '<p>' . $append_to_email . '</p>';
    $body .= '<p>Kindly provide your information online: ' . url("<front>", array("absolute" => TRUE)) . '</p>';
    $body .= '<p>Kind regards,' . '<br />';
    $body .= 'OCHA</p>';

    $message['subject'] = t('New Request for @content_types (from OCHA)', array('@content_types' => implode(',', $content_types)));
    if (isset($node->field_request_deadline['und'][0]['value'])) {
      $message['subject'] .= t(' - requested by @deadline', array('@deadline' => format_date(strtotime($node->field_request_deadline['und'][0]['value']), 'request')));
    }
    $message['body'][] = drupal_html_to_text($body);
  }
}


function crf_requests_get_cluster_contacts() {
  $contacts = array();
  
  $clusters_vocabulary = taxonomy_vocabulary_machine_name_load('clusters');
  $clusters = taxonomy_get_tree($clusters_vocabulary->vid, 0, NULL, TRUE);

  foreach ($clusters as $cluster) {
    if (!empty($cluster->field_information_focal_points)) {
      foreach ($cluster->field_information_focal_points['und'] as $information_focal_point) {
        $contacts[$information_focal_point['target_id']] = node_load($information_focal_point['target_id']);
      }
    }
  }

  return $contacts;
}


/**
 * Implements hook_block_info().
 */
function crf_requests_block_info() {
  $blocks['legend'] = array(
    'info' => t('Legend'),
  );
  $blocks['create_request'] = array(
    'info' => t('Create Request'),
  );
  $blocks['administrator'] = array(
    'info' => t('Administrator'),
  );
  $blocks['view_data'] = array(
    'info' => t('View Data'),
  );
  $blocks['tools'] = array(
    'info' => t('Tools'),
  );
  return $blocks;
}


/**
 * Implements hook_block_view().
 */
function crf_requests_block_view($delta = '') {  
  $block = array();

  switch ($delta) {
    case 'legend':
      $legend_vars = array(
        'path' => path_to_theme() . '/images/crf_request/request-legend.png',
        'alt' => 'Legend',
        'title' => 'Legend',
        'width' => '172',
        'height' => '254',
        'attributes' => array('class' => 'request-legend'),
      );
    
      $block['subject'] = t('Legend');
      $block['content'] = theme('image', $legend_vars);
      break;
    case 'create_request':
      $block['subject'] = t('Create Request');
      $block['content'] = drupal_get_form('crf_requests_create_form');
      break;
    case 'administrator':
      $block['subject'] = t('Administrator');
      $block['content'] = drupal_get_form('crf_requests_admin_form');
      break;
    case 'view_data':
      $block['subject'] = t('View Data');
      $block['content'] = drupal_get_form('crf_requests_view_data_form');
      break;
    case 'tools':
      $items = array();
      if ($node = menu_get_object()) {
        $items[] = l('Print ' . $node->title, 'print/' . $node->nid);
        $block['subject'] = t('Tools');
        $block['content'] = theme('item_list', array('items' => $items));
      }
      break;
  }
  
  return $block;
}


function crf_requests_create_form() {
  $form['links'] = array(
    '#type' => 'select',
    '#options' => array(
      'node/add/crf-request' => 'Request (Clusters)',
      'node/add/non-cluster-request' => 'Request (Non-Cluster)',
      'node/add/internal-request' => 'Request (Internal)',
    ),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Go',
  );
  return $form;
}


function crf_requests_create_form_submit($form, $form_state) {
  drupal_goto($form_state['values']['links']);
}


function crf_requests_admin_form() {
  $form['links'] = array(
    '#type' => 'select',
    '#options' => array(
      'node/add/cluster-objectives' => 'Create Cluster Objective',
      'node/add/contact' => 'Create Focal Point',
      'node/add/indicator-definition' => 'Create Indicator Definition',
      'admin/content' => 'Manage Content',
      'admin/structure/taxonomy/clusters' => 'Manage Clusters',
      'admin/structure/taxonomy/emergencies' => 'Manage Emergencies',
      'admin/structure/taxonomy/job_title' => 'Manage Job Titles',
      'admin/structure/taxonomy/locations' => 'Manage Locations',
      'admin/structure/taxonomy/organizations' => 'Manage Organisations',
      'admin/structure/taxonomy/reporting_types' => 'Manage Reporting types',
    ),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Go',
  );
  return $form;
}


function crf_requests_admin_form_submit($form, $form_state) {
  drupal_goto($form_state['values']['links']);
}


function crf_requests_view_data_form() {
  $form['links'] = array(
    '#type' => 'select',
    '#options' => array(
      'request/cluster/content' => 'Requests (Clusters)',
      'request/non-cluster/content' => 'Requests (Non-Cluster)',
      'request/internal/content' => 'Requests (Internal)',
      'crf/cluster-content/hr_sitrep/Situation Report Information' => 'Situation Report Information',
      'crf/indicator-data/table' => 'Indicator Values',
      'crf/cluster-content/sectoral_analysis/Sectoral Analysis' => 'Sectoral Analysis',
      'taxonomy/term/all/contacts' => 'Contacts',
      'resources/assessment-registry' => 'Assessments',
    ),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Go',
  );
  return $form;
}

function crf_requests_view_data_form_submit($form, $form_state) {
  drupal_goto($form_state['values']['links']);
}


function crf_requests_convert_form_textfield($type, $machine_name = NULL) {
  $options = array('' => '- Any -');
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', $type)
    ->entityCondition('bundle', $machine_name)
    ->execute();
  if (!empty($result)) {
    foreach (array_keys($result[$type]) as $id) {
      if ($type == 'taxonomy_term') {
        $entity = taxonomy_term_load($id);
        $options[$id] = $entity->name;
      }
      else if ($type == 'node') {
        $entity = node_load($id);
        $options[$id] = $entity->title;
      }
    }
  }
  return array(
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => '',
  );
}

